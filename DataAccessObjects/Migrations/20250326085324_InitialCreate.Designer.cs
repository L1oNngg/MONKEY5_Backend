// <auto-generated />
using System;
using MONKEY5.DataAccessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250326085324_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MONKEY5.BusinessObjects.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ServiceEndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ServiceStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceUnitAmount")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("60000000-0000-0000-0000-000000000001"),
                            BookingDateTime = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("40000000-0000-0000-0000-000000000001"),
                            ServiceEndTime = new DateTime(2025, 3, 3, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000001"),
                            ServiceStartTime = new DateTime(2025, 3, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceUnitAmount = 3,
                            StaffId = new Guid("50000000-0000-0000-0000-000000000001"),
                            Status = 3,
                            TotalPrice = 270000f
                        },
                        new
                        {
                            BookingId = new Guid("60000000-0000-0000-0000-000000000002"),
                            BookingDateTime = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("40000000-0000-0000-0000-000000000002"),
                            ServiceEndTime = new DateTime(2025, 3, 4, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000002"),
                            ServiceStartTime = new DateTime(2025, 3, 4, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceUnitAmount = 4,
                            StaffId = new Guid("50000000-0000-0000-0000-000000000003"),
                            Status = 3,
                            TotalPrice = 600000f
                        },
                        new
                        {
                            BookingId = new Guid("60000000-0000-0000-0000-000000000003"),
                            BookingDateTime = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("40000000-0000-0000-0000-000000000003"),
                            ServiceEndTime = new DateTime(2025, 3, 5, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000004"),
                            ServiceStartTime = new DateTime(2025, 3, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceUnitAmount = 5,
                            StaffId = new Guid("50000000-0000-0000-0000-000000000005"),
                            Status = 3,
                            TotalPrice = 400000f
                        },
                        new
                        {
                            BookingId = new Guid("60000000-0000-0000-0000-000000000004"),
                            BookingDateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("40000000-0000-0000-0000-000000000001"),
                            ServiceEndTime = new DateTime(2025, 3, 6, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000001"),
                            ServiceStartTime = new DateTime(2025, 3, 6, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceUnitAmount = 4,
                            StaffId = new Guid("50000000-0000-0000-0000-000000000002"),
                            Status = 1,
                            TotalPrice = 360000f
                        },
                        new
                        {
                            BookingId = new Guid("60000000-0000-0000-0000-000000000005"),
                            BookingDateTime = new DateTime(2025, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("40000000-0000-0000-0000-000000000002"),
                            ServiceEndTime = new DateTime(2025, 3, 7, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000003"),
                            ServiceStartTime = new DateTime(2025, 3, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceUnitAmount = 5,
                            StaffId = new Guid("50000000-0000-0000-0000-000000000004"),
                            Status = 1,
                            TotalPrice = 1000000f
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.CompletionReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("CompletionReports");

                    b.HasData(
                        new
                        {
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000001"),
                            BookingId = new Guid("60000000-0000-0000-0000-000000000001"),
                            ReportDateTime = new DateTime(2025, 3, 3, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            ReportText = "Cleaned living room, kitchen, 2 bathrooms, and 3 bedrooms. All surfaces dusted and floors mopped."
                        },
                        new
                        {
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000002"),
                            BookingId = new Guid("60000000-0000-0000-0000-000000000002"),
                            ReportDateTime = new DateTime(2025, 3, 4, 18, 20, 0, 0, DateTimeKind.Unspecified),
                            ReportText = "Took care of the child, prepared lunch, helped with homework, and played educational games."
                        },
                        new
                        {
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000003"),
                            BookingId = new Guid("60000000-0000-0000-0000-000000000003"),
                            ReportDateTime = new DateTime(2025, 3, 5, 18, 10, 0, 0, DateTimeKind.Unspecified),
                            ReportText = "Prepared 5 dishes: spring rolls, pho, grilled chicken, stir-fried vegetables, and mango sticky rice for dessert."
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Address = "123 Nguyen Hue Street",
                            City = "Ho Chi Minh City",
                            Country = "Vietnam",
                            PostalCode = "70000"
                        },
                        new
                        {
                            LocationId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Address = "456 Le Loi Street",
                            City = "Hanoi",
                            Country = "Vietnam",
                            PostalCode = "10000"
                        },
                        new
                        {
                            LocationId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Address = "789 Tran Hung Dao Street",
                            City = "Da Nang",
                            Country = "Vietnam",
                            PostalCode = "50000"
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentPaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = new Guid("70000000-0000-0000-0000-000000000001"),
                            Amount = 270000m,
                            BookingId = new Guid("60000000-0000-0000-0000-000000000001"),
                            PaymentCreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 2,
                            PaymentPaidAt = new DateTime(2025, 3, 2, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = 1
                        },
                        new
                        {
                            PaymentId = new Guid("70000000-0000-0000-0000-000000000002"),
                            Amount = 600000m,
                            BookingId = new Guid("60000000-0000-0000-0000-000000000002"),
                            PaymentCreatedAt = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 3,
                            PaymentPaidAt = new DateTime(2025, 3, 4, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = 1
                        },
                        new
                        {
                            PaymentId = new Guid("70000000-0000-0000-0000-000000000003"),
                            Amount = 400000m,
                            BookingId = new Guid("60000000-0000-0000-0000-000000000003"),
                            PaymentCreatedAt = new DateTime(2025, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 1,
                            PaymentPaidAt = new DateTime(2025, 3, 4, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = 1
                        },
                        new
                        {
                            PaymentId = new Guid("70000000-0000-0000-0000-000000000004"),
                            Amount = 360000m,
                            BookingId = new Guid("60000000-0000-0000-0000-000000000004"),
                            PaymentCreatedAt = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 2,
                            PaymentPaidAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = 0
                        },
                        new
                        {
                            PaymentId = new Guid("70000000-0000-0000-0000-000000000005"),
                            Amount = 1000000m,
                            BookingId = new Guid("60000000-0000-0000-0000-000000000005"),
                            PaymentCreatedAt = new DateTime(2025, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = 1,
                            PaymentPaidAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = 0
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Refund", b =>
                {
                    b.Property<Guid>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("RefundDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefundId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Refunds");

                    b.HasData(
                        new
                        {
                            RefundId = new Guid("90000000-0000-0000-0000-000000000001"),
                            PaymentId = new Guid("70000000-0000-0000-0000-000000000003"),
                            RefundAmount = 100000m,
                            RefundDateTime = new DateTime(2025, 3, 5, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            RefundReason = "One dish was not prepared as requested"
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.ReportImage", b =>
                {
                    b.Property<Guid>("ReportImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportImageId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportImages");

                    b.HasData(
                        new
                        {
                            ReportImageId = new Guid("b0000000-0000-0000-0000-000000000001"),
                            ImagePath = "/images/reports/cleaning_living_room.jpg",
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ReportImageId = new Guid("b0000000-0000-0000-0000-000000000002"),
                            ImagePath = "/images/reports/cleaning_kitchen.jpg",
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ReportImageId = new Guid("b0000000-0000-0000-0000-000000000003"),
                            ImagePath = "/images/reports/childcare_lunch.jpg",
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ReportImageId = new Guid("b0000000-0000-0000-0000-000000000004"),
                            ImagePath = "/images/reports/cooking_spring_rolls.jpg",
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ReportImageId = new Guid("b0000000-0000-0000-0000-000000000005"),
                            ImagePath = "/images/reports/cooking_pho.jpg",
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ReportImageId = new Guid("b0000000-0000-0000-0000-000000000006"),
                            ImagePath = "/images/reports/cooking_dessert.jpg",
                            ReportId = new Guid("a0000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Review", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatingStar")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = new Guid("80000000-0000-0000-0000-000000000001"),
                            BookingId = new Guid("60000000-0000-0000-0000-000000000001"),
                            Comment = "Excellent cleaning service, very thorough and professional!",
                            RatingStar = 5,
                            ReviewDateTime = new DateTime(2025, 3, 3, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReviewId = new Guid("80000000-0000-0000-0000-000000000002"),
                            BookingId = new Guid("60000000-0000-0000-0000-000000000002"),
                            Comment = "Great childcare service, my child was very happy.",
                            RatingStar = 4,
                            ReviewDateTime = new DateTime(2025, 3, 4, 21, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReviewId = new Guid("80000000-0000-0000-0000-000000000003"),
                            BookingId = new Guid("60000000-0000-0000-0000-000000000003"),
                            Comment = "Amazing cooking! The dishes were delicious and beautifully presented.",
                            RatingStar = 5,
                            ReviewDateTime = new DateTime(2025, 3, 5, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Description = "Professional home cleaning service",
                            ServiceName = "Cleaning",
                            UnitPrice = 90000m,
                            UnitType = "hour"
                        },
                        new
                        {
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000002"),
                            Description = "Childcare service for one child",
                            ServiceName = "Child care (1 child)",
                            UnitPrice = 150000m,
                            UnitType = "hour"
                        },
                        new
                        {
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000003"),
                            Description = "Childcare service for two children",
                            ServiceName = "Child care (2 children)",
                            UnitPrice = 200000m,
                            UnitType = "hour"
                        },
                        new
                        {
                            ServiceId = new Guid("20000000-0000-0000-0000-000000000004"),
                            Description = "Professional cooking service",
                            ServiceName = "Cooking",
                            UnitPrice = 80000m,
                            UnitType = "dish"
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Customer", b =>
                {
                    b.HasBaseType("MONKEY5.BusinessObjects.User");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("LocationId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("40000000-0000-0000-0000-000000000001"),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenvana@example.com",
                            FullName = "Nguyen Van A",
                            Gender = "Male",
                            IdNumber = "123456789012",
                            PasswordHash = "KVbfZ/XvEB5ZatOdzu0d5A==.MGZuYGwdFfAYBtS553aGBgcVBHOS9Ec4VSMIwWAvNkw=",
                            PhoneNumber = "0123456781",
                            Role = "Customer",
                            LocationId = new Guid("10000000-0000-0000-0000-000000000001"),
                            RegistrationDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("40000000-0000-0000-0000-000000000002"),
                            DateOfBirth = new DateTime(1990, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranthib@example.com",
                            FullName = "Tran Thi B",
                            Gender = "Female",
                            IdNumber = "234567890123",
                            PasswordHash = "yzJMGh0cPBWVj6Om1zFddQ==.qzaxvQMytQS/OCjRuFou6fwqymWOK+ZzZA4H+2sdm2s=",
                            PhoneNumber = "0123456782",
                            Role = "Customer",
                            LocationId = new Guid("10000000-0000-0000-0000-000000000002"),
                            RegistrationDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("40000000-0000-0000-0000-000000000003"),
                            DateOfBirth = new DateTime(1988, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "levanc@example.com",
                            FullName = "Le Van C",
                            Gender = "Male",
                            IdNumber = "345678901234",
                            PasswordHash = "SFPd6oZP+TNlkth1KUyA9w==.k0RbpTR1fgpb90ZU7mcXgH+25rLTh/wAEigXY7ymnq8=",
                            PhoneNumber = "0123456783",
                            Role = "Customer",
                            LocationId = new Guid("10000000-0000-0000-0000-000000000003"),
                            RegistrationDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Manager", b =>
                {
                    b.HasBaseType("MONKEY5.BusinessObjects.User");

                    b.ToTable("Managers", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("30000000-0000-0000-0000-000000000001"),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@monkey5.com",
                            FullName = "Admin User",
                            Gender = "Male",
                            IdNumber = "123456789",
                            PasswordHash = "gOt77yMpA8P/1Jpyq6AiVQ==.so7j6ES/rMQDs9/eTPaJRp3u5owBEiFzIxWBQXcDDWI=",
                            PhoneNumber = "0123456789",
                            Role = "Manager"
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Staff", b =>
                {
                    b.HasBaseType("MONKEY5.BusinessObjects.User");

                    b.Property<double>("AvgRating")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToTable("Staffs", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("50000000-0000-0000-0000-000000000001"),
                            DateOfBirth = new DateTime(1992, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phamthid@example.com",
                            FullName = "Pham Thi D",
                            Gender = "Female",
                            IdNumber = "456789012345",
                            PasswordHash = "W12KKBiq0WRW8khm+0frKw==.YRKi6vQ+r1lZpXpXxIgU5wa92lChBRJXG1hsFHN3nN4=",
                            PhoneNumber = "0234567891",
                            Role = "Staff",
                            AvgRating = 4.5,
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("50000000-0000-0000-0000-000000000002"),
                            DateOfBirth = new DateTime(1991, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoangvane@example.com",
                            FullName = "Hoang Van E",
                            Gender = "Male",
                            IdNumber = "567890123456",
                            PasswordHash = "OCEnvfndsIm0T67TJlj9jw==.abeVgX0/+v9oo5hdiATzOUOUMcPLTrNEA//3iocKC80=",
                            PhoneNumber = "0234567892",
                            Role = "Staff",
                            AvgRating = 4.2000000000000002,
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("50000000-0000-0000-0000-000000000003"),
                            DateOfBirth = new DateTime(1989, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenthif@example.com",
                            FullName = "Nguyen Thi F",
                            Gender = "Female",
                            IdNumber = "678901234567",
                            PasswordHash = "TfjsN//OmUqN3+g8IXSDiw==.9m3a6STJ4tSBC3adHhzfQ1rEqd4tpbzCoby+6aUyDMY=",
                            PhoneNumber = "0234567893",
                            Role = "Staff",
                            AvgRating = 4.7999999999999998,
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("50000000-0000-0000-0000-000000000004"),
                            DateOfBirth = new DateTime(1993, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranvang@example.com",
                            FullName = "Tran Van G",
                            Gender = "Male",
                            IdNumber = "789012345678",
                            PasswordHash = "8kWU7grc3tr8pp9fS2um3g==.hgaLxaOhcW76o6d4ixCJnF8MnY4g8jiAUtekUTITgpQ=",
                            PhoneNumber = "0234567894",
                            Role = "Staff",
                            AvgRating = 4.2999999999999998,
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("50000000-0000-0000-0000-000000000005"),
                            DateOfBirth = new DateTime(1987, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lethih@example.com",
                            FullName = "Le Thi H",
                            Gender = "Female",
                            IdNumber = "890123456789",
                            PasswordHash = "vC3eO8x7B1vw0VxnT4AcZA==.9FzoJpeFflHS9/uHP2UJo2dACGOIE+a0BBSEb9OIl3o=",
                            PhoneNumber = "0234567895",
                            Role = "Staff",
                            AvgRating = 4.9000000000000004,
                            Status = 0
                        },
                        new
                        {
                            UserId = new Guid("50000000-0000-0000-0000-000000000006"),
                            DateOfBirth = new DateTime(1990, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phamvani@example.com",
                            FullName = "Pham Van I",
                            Gender = "Male",
                            IdNumber = "901234567890",
                            PasswordHash = "iWjGWUk3SEjow6oQF6pd0g==.hIGIyYXak9hnvgrT3ez3Gj3O9KRthzQBaJx53xUKTd8=",
                            PhoneNumber = "0234567896",
                            Role = "Staff",
                            AvgRating = 4.5999999999999996,
                            Status = 0
                        });
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Booking", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MONKEY5.BusinessObjects.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MONKEY5.BusinessObjects.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.CompletionReport", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.Booking", "Booking")
                        .WithOne()
                        .HasForeignKey("MONKEY5.BusinessObjects.CompletionReport", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Payment", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.Booking", "Booking")
                        .WithOne()
                        .HasForeignKey("MONKEY5.BusinessObjects.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Refund", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.Payment", "Payment")
                        .WithOne()
                        .HasForeignKey("MONKEY5.BusinessObjects.Refund", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.ReportImage", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.CompletionReport", "CompletionReport")
                        .WithMany("ReportImages")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletionReport");
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Review", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.Booking", "Booking")
                        .WithOne()
                        .HasForeignKey("MONKEY5.BusinessObjects.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Customer", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MONKEY5.BusinessObjects.User", null)
                        .WithOne()
                        .HasForeignKey("MONKEY5.BusinessObjects.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Manager", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.User", null)
                        .WithOne()
                        .HasForeignKey("MONKEY5.BusinessObjects.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.Staff", b =>
                {
                    b.HasOne("MONKEY5.BusinessObjects.User", null)
                        .WithOne()
                        .HasForeignKey("MONKEY5.BusinessObjects.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MONKEY5.BusinessObjects.CompletionReport", b =>
                {
                    b.Navigation("ReportImages");
                });
#pragma warning restore 612, 618
        }
    }
}
